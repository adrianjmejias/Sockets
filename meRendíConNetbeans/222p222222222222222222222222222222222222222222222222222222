STRCPY(3P)                                    POSIX Programmer's Manual                                    STRCPY(3P)

[1mPROLOG[0m
       This  manual  page  is part of the POSIX Programmer's Manual.  The Cygwin implementation of this interface may
       differ (consult the corresponding Cygwin manual page for details of Cygwin behavior), or the interface may not
       be implemented on Cygwin.

[1mNAME[0m
       stpcpy, strcpy ‚Äî copy a string and return a pointer to the end of the result

[1mSYNOPSIS[0m
       #include <string.h>

       char *stpcpy(char *restrict [4ms1[24m, const char *restrict [4ms2[24m);
       char *strcpy(char *restrict [4ms1[24m, const char *restrict [4ms2[24m);

[1mDESCRIPTION[0m
       For  [4mstrcpy[24m(): The functionality described on this reference page is aligned with the ISO C standard. Any con‚Äê
       flict between the requirements described here  and  the  ISO C  standard  is  unintentional.  This  volume  of
       POSIX.1‚Äê2008 defers to the ISO C standard.

       The  [4mstpcpy[24m()  and  [4mstrcpy[24m()  functions  shall copy the string pointed to by [4ms2[24m (including the terminating NUL
       character) into the array pointed to by [4ms1[24m.

       If copying takes place between objects that overlap, the behavior is undefined.

[1mRETURN VALUE[0m
       The [4mstpcpy[24m() function shall return a pointer to the terminating NUL character copied into the [4ms1[24m buffer.

       The [4mstrcpy[24m() function shall return [4ms1[24m.

       No return values are reserved to indicate an error.

[1mERRORS[0m
       No errors are defined.

       [4mThe[24m [4mfollowing[24m [4msections[24m [4mare[24m [4minformative.[0m

[1mEXAMPLES[0m
   [1mConstruction of a Multi-Part Message in a Single Buffer[0m
           [1m#include <string.h>[0m
           [1m#include <stdio.h>[0m

           int
           main (void)
           {
               char buffer [10];
               char *name = buffer;

               name = stpcpy (stpcpy (stpcpy (name, "ice"),"-"), "cream");
               puts (buffer);
               return 0;
           }

   [1mInitializing a String[0m
       The following example copies the string [1m"----------" [22minto the [4mpermstring[24m variable.

           [1m#include <string.h>[0m
           [1m...[0m
           [1mstatic char permstring[11];[0m
           [1m...[0m
           [1mstrcpy(permstring, "----------");[0m
           [1m...[0m

   [1mStoring a Key and Data[0m
       The following example allocates space for a key using [4mmalloc[24m() then uses [4mstrcpy[24m() to place the key there. Then
       it  allocates space for data using [4mmalloc[24m(), and uses [4mstrcpy[24m() to place data there. (The user-defined function
       [4mdbfree[24m() frees memory previously allocated to an array of type [1mstruct element *[22m.)

           [1m#include <string.h>[0m
           [1m#include <stdlib.h>[0m
           [1m#include <stdio.h>[0m
           [1m...[0m
           [1m/* Structure used to read data and store it. */[0m
           [1mstruct element {[0m
               [1mchar *key;[0m
               [1mchar *data;[0m
           [1m};[0m

           struct element *tbl, *curtbl;
           char *key, *data;
           int count;
           ...
           void dbfree(struct element *, int);
           ...
           if ((curtbl->key = malloc(strlen(key) + 1)) == NULL) {
               perror("malloc"); dbfree(tbl, count); return NULL;
           }
           strcpy(curtbl->key, key);

           if ((curtbl->data = malloc(strlen(data) + 1)) == NULL) {
               perror("malloc"); free(curtbl->key); dbfree(tbl, count); return NULL;
           }
           strcpy(curtbl->data, data);
           ...

[1mAPPLICATION USAGE[0m
       Character movement is performed differently in different implementations. Thus, overlapping  moves  may  yield
       surprises.

       This  version  is  aligned with the ISO C standard; this does not affect compatibility with XPG3 applications.
       Reliable error detection by this function was never guaranteed.

[1mRATIONALE[0m
       None.

[1mFUTURE DIRECTIONS[0m
       None.

[1mSEE ALSO[0m
       [4mstrncpy[24m(), [4mwcscpy[24m()

       The Base Definitions volume of POSIX.1‚Äê2008, [1m<string.h>[0m

[1mCOPYRIGHT[0m
       Portions of this text are reprinted and reproduced in electronic form from  IEEE  Std  1003.1,  2013  Edition,
       Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Speci‚Äê
       fications Issue 7, Copyright (C) 2013 by the Institute of Electrical and Electronics Engineers,  Inc  and  The
       Open  Group.   (This  is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the event of any dis‚Äê
       crepancy between this version and the original IEEE and The Open Group Standard, the  original  IEEE  and  The
       Open   Group   Standard   is   the  referee  document.  The  original  Standard  can  be  obtained  online  at
       http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during
       the  conversion  of  the  source  files  to  man  page  format.  To  report  such errors, see https://www.ker‚Äê
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                      2013                                              STRCPY(3P)
